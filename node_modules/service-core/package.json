{
  "_args": [
    [
      "git+ssh://git@github.com/bbarr/service-core.git",
      "/Users/bbarr/web/kourier/transformer"
    ]
  ],
  "_from": "git+ssh://git@github.com/bbarr/service-core.git",
  "_id": "service-core@1.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/service-core",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/bbarr/service-core/master/package.json",
      "gitUrl": "git://github.com/bbarr/service-core.git",
      "httpsUrl": "git+https://github.com/bbarr/service-core.git",
      "shortcut": "github:bbarr/service-core",
      "ssh": "git@github.com:bbarr/service-core.git",
      "sshUrl": "git+ssh://git@github.com/bbarr/service-core.git",
      "type": "github"
    },
    "name": null,
    "raw": "git+ssh://git@github.com/bbarr/service-core.git",
    "rawSpec": "git+ssh://git@github.com/bbarr/service-core.git",
    "scope": null,
    "spec": "git+ssh://git@github.com/bbarr/service-core.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+ssh://git@github.com/bbarr/service-core.git#d8c27a0d9803e562656636d6fd5a74e4f6f5adb8",
  "_shasum": "80ac518e4a5a97fe0668910c000168ce84152d60",
  "_shrinkwrap": null,
  "_spec": "git+ssh://git@github.com/bbarr/service-core.git",
  "_where": "/Users/bbarr/web/kourier/transformer",
  "author": "",
  "dependencies": {
    "kismatch": "0.0.8",
    "kisschema": "^1.3.1",
    "ramda": "^0.20.1"
  },
  "description": "Stop tying your applications to a specific protocol. Write once, call from anywhere.",
  "devDependencies": {
    "babel-cli": "^6.6.5",
    "babel-core": "^6.3.15",
    "babel-preset-es2015": "^6.3.13",
    "babel-preset-stage-1": "^6.3.13",
    "babel-register": "^6.3.13",
    "mocha": "^2.2.5",
    "sinon": "^1.15.3"
  },
  "gitHead": "d8c27a0d9803e562656636d6fd5a74e4f6f5adb8",
  "license": "ISC",
  "main": "build/index.js",
  "name": "service-core",
  "optionalDependencies": {},
  "readme": "# service-core\nStop tying your applications to a specific protocol. Write once, call from anywhere.\n\n###Example:\n\nFor some silly reason, you need to build a web application that allows basic math calculations via HTTP.\n\nYou start simply, using express:\n\n```javascript\n\nimport express from 'express'\n\nconst server = express()\n\nserver.get('/add/:x/:y', (req, res) => {\n  res.send(req.params.x + req.params.y)\n})\n\nserver.get('/subtract/:x/:y', (req, res) => {\n  res.send(req.params.x - req.params.y)\n})\n\nserver.get('/multiply/:x/:y', (req, res) => {\n  res.send(req.params.x * req.params.y)\n})\n\nserver.get('/divide/:x/:y', (req, res) => {\n  if (req.params.y === 0) return res.status(500).send('NO.')\n  res.send(req.params.x / req.params.y)\n})\n\nserver.listen(3000)\n```\n\nNow, someone suggests you should be prepared to handle huge numbers and more advanced calculations,\nand you are starting to suspect that running this on a single-thread is a bad idea. Let's move \nthis functionality over to a worker, maybe AWS Lambda, or Azure Functions, or IronWorker, etc.\n\nWe have some obvious problems here. First, our \"application\" is specifically an express-based web application.\nIt is all mixed into the HTTP handling, and while we could easily break out our fancy calculations to some independent module \nwith a fancy new API for things like `.add(1, 1)`, etc, we still don't solve the issue of dispatching in a non-HTTP based environment.\n\nThe answer, it seems, is to _dispatch off of the incoming data_.\n\nInstead of HTTP requests like:\n`GET /add/1/1`\n\nTry:\n`{ \"action\": \"add\", \"x\": 1, \"y\": 1 }`\n\nNow, this object can be sent into any system and dispatched using some basic pattern-matching.\n\n...in progress.\n",
  "readmeFilename": "README.md",
  "scripts": {
    "dev": "babel --watch=src --out-file build/index.js",
    "test": "mocha --watch --compilers js:babel-register"
  },
  "version": "1.0.0"
}
